using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using zEVRental.Repositories.CuongCLA.Basic;
using zEVRental.Repositories.CuongCLA.Models;

namespace zEVRental.Repositories.CuongCLA
{
    public class PaymentCuongClaRepository : GenericRepository<PaymentCuongCla>
    {
        public PaymentCuongClaRepository()
        {
        }
        public PaymentCuongClaRepository(FA25_PRN222_SE1834_G3_EVRentalContext context) => _context = context;
        
        public async Task<List<PaymentCuongCla>> GetAllAsync()
        {
            var items = await _context.PaymentCuongClas
                .Include(p => p.Booking)
                    .ThenInclude(b => b.Customer)
                .Include(p => p.ProcessedByNavigation)
                .ToListAsync();

            return items ?? new List<PaymentCuongCla>();
        }

        public async Task<PaymentCuongCla> GetByIdAsync(int id)
        {
            var payment = await _context.PaymentCuongClas
                  .Include(p => p.Booking)
                      .ThenInclude(b => b.Customer)
                  .Include(p => p.ProcessedByNavigation)
                  .FirstOrDefaultAsync(p => p.PaymentCuongClaid == id);
            return payment ?? new PaymentCuongCla();
        }

        public async Task<List<PaymentCuongCla>> SearchAsync(string paymentMethod, decimal amount, string status)
        {
            var query = _context.PaymentCuongClas
                .Include(p => p.Booking)
                    .ThenInclude(b => b.Customer)
                .Include(p => p.ProcessedByNavigation)
                .AsQueryable();

            // Filter by payment method if provided
            if (!string.IsNullOrWhiteSpace(paymentMethod))
            {
                query = query.Where(p => p.PaymentMethod.Contains(paymentMethod));
            }

            // Filter by amount if provided (greater than 0)
            if (amount > 0)
            {
                query = query.Where(p => p.Amount >= amount);
            }

            // Filter by payment status if provided
            if (!string.IsNullOrWhiteSpace(status))
            {
                query = query.Where(p => p.PaymentStatus.Contains(status));
            }

            var payments = await query
                .OrderByDescending(p => p.PaymentDate)
                .ToListAsync();

            return payments ?? new List<PaymentCuongCla>();
        }
    }
}
